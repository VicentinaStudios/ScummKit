//
//  File.swift
//  
//
//  Created by Michael Borgmann on 13/01/2024.
//

import Foundation

/// A protocol for code generators that produce bytecode from expressions.
protocol CodeGenerator {
    
    associatedtype OpcodeType: RawRepresentable, CaseIterable where OpcodeType.RawValue == UInt8
    
    /// Generates bytecode for the given expression.
    ///
    /// - Parameters:
    ///   - expression: The expression to generate bytecode for.
    /// - Returns: A `Chunk` containing the generated bytecode.
    /// - Throws: An error of type `CodeGeneratorError` if bytecode generation fails.
    func generateByteCode(expression: Expression) throws -> Chunk
}

/// A base class for code generators, implementing common functionality for bytecode generation.
///
/// Subclasses are expected to provide concrete implementations for specific bytecode generation.
/// This class also conforms to the `ExpressionVisitor` protocol to handle different types of expressions.
class BaseCodeGenerator<OpcodeType: RawRepresentable & CaseIterable>: CodeGenerator, ExpressionVisitor where OpcodeType.RawValue == UInt8 {

    // MARK: Properties
    
    /// The chunk to store the generated bytecode.
    var chunk: Chunk
    
    /// The line number associated with the generated bytecode.
    var line: Int?
    
    // MARK: Lifecycle
    
    /// Initializes the code generator with a given chunk.
    ///
    /// - Parameter chunk: The chunk to store the generated bytecode.
    init(with chunk: Chunk) {
        self.chunk = chunk
    }
    
    // MARK: Actions
    
    /// Generates bytecode for the given expression.
    ///
    /// This method is meant to be overridden by subclasses.
    ///
    /// - Parameter expression: The expression to generate bytecode for.
    /// - Returns: A `Chunk` containing the generated bytecode.
    /// - Throws: An error of type `CodeGeneratorError.methodNotOverridden` if the method is not overridden.
    func generateByteCode(expression: Expression) throws -> Chunk {
        fatalError("Method should be overridden by subclasses")
    }
    
    // MARK: Helper
    
    /// Emits a sequence of bytes into the chunk.
    ///
    /// - Parameter bytes: The bytes to emit.
    /// - Throws: An error of type `CodeGeneratorError.unknownLine` if the line number is not known.
    func emitBytes(_ bytes: UInt8...) throws {
        
        guard let line = line else {
            throw CodeGeneratorError.unknownLine(bytes: Array(bytes))
        }
        
        try bytes.forEach {
            try chunk.write(byte: $0, line: line)
        }
    }
    
    /// Evaluates an expression using the provided visitor.
    ///
    /// - Parameter expression: The expression to evaluate.
    /// - Returns: The result of the expression evaluation.
    /// - Throws: An error of type `CodeGeneratorError.expressionEvaluationFailed` if evaluation fails.
    func evaluate(_ expression: Expression) throws -> Any? {
        try expression.accept(visitor: self)
    }
    
    // MARK: Expression Visitor
    
    /// Visits a literal expression.
    ///
    /// This method is meant to be overridden by subclasses.
    ///
    /// - Parameter expression: The literal expression to visit.
    /// - Returns: The result of the literal expression evaluation.
    /// - Throws: An error of type `CodeGeneratorError.methodNotOverridden` if the method is not overridden.
    func visitLiteralExpr(_ expression: Literal) throws -> Any? {
        fatalError("Method should be overridden by subclasses")
    }
    
    /// Visits a grouping expression.
    ///
    /// This method is meant to be overridden by subclasses.
    ///
    /// - Parameter expression: The grouping expression to visit.
    /// - Returns: The result of the grouping expression evaluation.
    /// - Throws: An error of type `CodeGeneratorError.methodNotOverridden` if the method is not overridden.
    func visitGroupingExpr(_ expression: Grouping) throws -> Any? {
        fatalError("Method should be overridden by subclasses")
    }
    
    /// Visits a unary expression.
    ///
    /// This method is meant to be overridden by subclasses.
    ///
    /// - Parameter expression: The unary expression to visit.
    /// - Returns: The result of the unary expression evaluation.
    /// - Throws: An error of type `CodeGeneratorError.methodNotOverridden` if the method is not overridden.
    func visitUnaryExpr(_ expression: Unary) throws -> Any? {
        fatalError("Method should be overridden by subclasses")
    }
    
    /// Visits a binary expression.
    ///
    /// This method is meant to be overridden by subclasses.
    ///
    /// - Parameter expression: The binary expression to visit.
    /// - Returns: The result of the binary expression evaluation.
    /// - Throws: An error of type `CodeGeneratorError.methodNotOverridden` if the method is not overridden.
    func visitBinaryExpr(_ expression: Binary) throws -> Any? {
        fatalError("Method should be overridden by subclasses")

    }
}
